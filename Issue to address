Title: Implement Refill Event & Inventory Logging with Time/Inventory-Based Reminders

Background:
Users sometimes forget to refill their medication until they are low or out of pills, which can interrupt their routine. The goal is to add a feature that tracks both refill events and medication inventory while setting up reminders based on either elapsed time or remaining supply. This should help users remember to request a refill on time, even if they forget to update the app.

Feature Description:
Implement a new logging and reminder system with the following functionality:
	1.	Event Logging:
	•	Allow users to log two types of events:
	•	“Asked for a refill”
	•	“Collected refill”
	•	These events should be stored in the app’s history (e.g., in HistoryView.swift and related model objects in Models.swift).
	2.	Inventory Logging:
	•	Users can log the current number of pills left along with the expected time until the next refill.
	•	The system should track:
	•	The number of pills at the time of the refill
	•	The time elapsed since the last refill
	•	A calculated “pills/day” metric to predict when the user will run out (default threshold: 2 weeks of supply)
	•	When a refill is logged, the inventory counter should reset accordingly.
	3.	Reminder System:
Create two types of reminders to prompt the user to request a refill:
	•	Inventory-based Reminder:
	•	Triggered when the remaining pills indicate a supply for less than 2 weeks.
	•	Time-based Reminder:
	•	Triggered when a set time period (default = 2 weeks) has elapsed since the last refill.
Reminder Behavior:
	•	When a reminder is triggered, the app should ask: “Have you requested a medication refill?”
	•	If the user takes no action, the reminder should repeat the next day.
	•	If the user opens the app and confirms:
	1.	“I’ve requested a refill”:
	•	Log a “refill requested” event.
	•	Stop the current daily reminder and schedule a follow-up reminder in 3 days asking if they have received the refill.
	•	If after 3 days there is still no confirmation, remind them again in 1 day.
	2.	“I’ve received the refill”:
	•	Prompt the user to enter the current number of pills.
	•	Log a “refill received” event.
	•	Reset the inventory count and timer.
	•	Recalculate the next reminder based on the new refill (again, defaulting to a 2-weeks supply or the time when inventory is predicted to run out).

Edge Cases & Considerations:
	•	User Inaction:
	•	Ensure that if the user does not respond, the reminder is repeated daily until they either request or confirm receipt of the refill.
	•	Data Consistency:
	•	When the user logs a refill, ensure that both the inventory count and the timer are reset.
	•	Validate the entered number of pills so that an unexpected or zero value is handled gracefully.
	•	Time & Inventory Sync:
	•	The reminder system should trigger at the earliest of the two conditions (time-based or inventory-based). For example, if the user runs low in pills before the time threshold, they should be notified immediately.
	•	Logging History:
	•	Every action (request or receipt) should be added to the history log so that the user has a complete event timeline.
	•	User Experience:
	•	The reminder prompt should allow for a simple selection of options and minimal friction.
	•	Consider notifying the user with an in-app alert and/or push notification as applicable.

Files Likely Impacted:
	•	UI Files:
	•	ContentView.swift
	•	SettingsView.swift
	•	HistoryView.swift
	•	Core Logic:
	•	MedicationApp.swift
	•	Models.swift (for defining new event types and logging logic)

Acceptance Criteria:
	1.	Event Logging:
	•	User can log “Asked for refill” and “Collected refill” events via the app.
	•	Events are visible in the history view with timestamps.
	2.	Inventory Logging:
	•	When a refill is received, the user is prompted to input the number of pills.
	•	The inventory counter and time since last refill are reset based on the user’s input.
	•	The system accurately calculates the predicted run-out date based on a default daily usage rate.
	3.	Reminder System:
	•	If either inventory level or elapsed time reaches the default threshold (2 weeks), a reminder is triggered.
	•	The reminder prompts the user with options:
	•	“I’ve requested a refill” (logs event and schedules follow-up in 3 days, with a subsequent reminder if still not confirmed)
	•	“I’ve received the refill” (logs event, resets inventory and timer, and recalculates the next reminder)
	•	If no action is taken, the reminder is repeated daily.
	4.	Edge Case Handling:
	•	Ensure robust behavior when the user does not interact with reminders.
	•	Validate user inputs for refill counts.
	•	Ensure that reminders do not conflict (i.e., when one condition is met, the earlier reminder is used).

Additional Notes:
	•	Aim for a simple yet robust implementation that handles user forgetfulness gracefully.
	•	Ensure that even if the user does not update their inventory regularly, they are still notified by time-based reminders.
	•	The solution should be extendable in case we decide to modify thresholds or add additional types of reminders in the future.

